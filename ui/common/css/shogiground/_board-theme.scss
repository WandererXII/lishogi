@use 'pkg:breakpoint-sass' as breakpoint;
@use '../abstract/media-queries';
@use '../abstract/uniboard';
@use '../theme/generated/theme';

$board-files: (
  'wood': 'wood.png',
  'wood1': 'wood1.jpg',
  'kaya1': 'kaya1.jpg',
  'kaya2': 'kaya2.jpg',
  'oak': 'oak.png',
  'painting1': 'painting1.jpg',
  'painting2': 'painting2.jpg',
  'kinkaku': 'kinkaku.jpg',
  'space': 'space.png',
  'doubutsu': 'doubutsu.png',
);

@each $board, $file in $board-files {
  .#{$board} {
    sg-board,
    #dasher_app .piece .list {
      background-image: url('../images/boards/#{$file}');
    }

    @include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
      sg-hand {
        background-image: url('../images/boards/#{$file}');
      }
    }
  }
}

%grid-dot {
  content: '';
  position: absolute;
  background-color: black;
  border-radius: 50%;
  width: 7px;
  height: 7px;
  margin: -4px;
  top: 0;
  left: 0;
}

sg-squares {
  border-top: 1px solid black;
  border-left: 1px solid black;

  sq {
    border-bottom: 1px solid black;
    border-right: 1px solid black;
  }

  .preload & {
    border-width: 0;
    border-bottom: 1px solid black;
    border-right: 1px solid black;
    background-image:
      linear-gradient(to right, black 1px, transparent 1px),
      linear-gradient(to bottom, black 1px, transparent 1px);
    background-size: calc(100% / 9) calc(100% / 9);
  }
}

.sg-wrap {
  &.d-9x9 sg-squares sq {
    &:nth-child(31),
    &:nth-child(34),
    &:nth-child(58),
    &:nth-child(61) {
      position: relative;

      &::after {
        @extend %grid-dot;
      }
    }
  }

  &.d-5x5 {
    sg-squares sq {
      &:nth-child(7),
      &:nth-child(10),
      &:nth-child(22),
      &:nth-child(25) {
        position: relative;

        &::after {
          @extend %grid-dot;
        }
      }
    }

    &.preload sg-squares {
      background-size: calc(100% / 5) calc(100% / 5);
    }
  }

  &.d-12x12 {
    sg-squares sq {
      &:nth-child(53),
      &:nth-child(57),
      &:nth-child(101),
      &:nth-child(105) {
        position: relative;

        &::after {
          @extend %grid-dot;

          width: 5px;
          height: 5px;
          margin: -3px;
        }
      }
    }

    &.preload sg-squares {
      background-size: calc(100% / 12) calc(100% / 12);
    }
  }
}

@include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
  sg-hand {
    border: 1px solid black;
  }

  .coords-edge .main-board .sg-wrap {
    border: 1px solid transparent;

    sg-board,
    sg-hand {
      outline: 1px solid black;
    }

    sg-hand {
      border: none;
    }
  }
}

.gray {
  sg-board {
    background-color: #878787;

    sq:nth-child(odd) {
      background: #878787 !important; // dark squares
    }

    sq:nth-child(even) {
      background: #d1d1d1 !important; // light squares
    }
  }

  .d-9x9 sg-board {
    sq:nth-child(-2n + 26),
    sq:nth-child(2n + 56) {
      background: #c0c0c0 !important;
    }
  }

  .d-12x12 sg-board {
    sq {
      background: #878787 !important; // reset squares
    }

    sq:nth-child(-n + 12):nth-child(even),
    sq:nth-child(n + 12):nth-child(-n + 24):nth-child(odd),
    sq:nth-child(n + 25):nth-child(-n + 36):nth-child(even),
    sq:nth-child(n + 37):nth-child(-n + 48):nth-child(odd),
    sq:nth-child(n + 49):nth-child(-n + 60):nth-child(even),
    sq:nth-child(n + 61):nth-child(-n + 72):nth-child(odd),
    sq:nth-child(n + 73):nth-child(-n + 84):nth-child(even),
    sq:nth-child(n + 85):nth-child(-n + 96):nth-child(odd),
    sq:nth-child(n + 97):nth-child(-n + 108):nth-child(even),
    sq:nth-child(n + 109):nth-child(-n + 120):nth-child(odd),
    sq:nth-child(n + 121):nth-child(-n + 132):nth-child(even),
    sq:nth-child(n + 133):nth-child(-n + 144):nth-child(odd) {
      background: #d1d1d1 !important; // light squares
    }
  }

  #dasher_app .piece .list {
    background: #878787;
  }

  .preload sg-squares {
    background: repeating-conic-gradient(#d1d1d1 0% 25%, transparent 0% 50%) 0 / calc(200% / 9)
      calc(200% / 9);
    background-image: none;
    background-position: 100% 100%;
  }

  .preload.d-5x5 sg-squares {
    background: repeating-conic-gradient(#d1d1d1 0% 25%, transparent 0% 50%) 0 / calc(200% / 5)
      calc(200% / 5);
    background-position: 100% 100%;
  }

  .preload.d-12x12 sg-squares {
    background: repeating-conic-gradient(#d1d1d1 0% 25%, transparent 0% 50%) 0 / calc(200% / 12)
      calc(200% / 12);
    background-position: 100% 100%;
  }

  @include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
    sg-hand {
      background-color: #bcbcbc;
    }
  }
}

.blue {
  sg-board {
    background-color: #617a8e;

    sq:nth-child(odd) {
      background: #617a8e !important; // dark squares
    }

    sq:nth-child(even) {
      background: #99aec2 !important; // light squares
    }
  }

  .d-9x9 sg-board {
    sq:nth-child(-2n + 26),
    sq:nth-child(2n + 56) {
      background: #91a4b6 !important;
    }
  }

  .d-12x12 sg-board {
    sq {
      background: #617a8e !important; // reset squares
    }

    sq:nth-child(-n + 12):nth-child(even),
    sq:nth-child(n + 12):nth-child(-n + 24):nth-child(odd),
    sq:nth-child(n + 25):nth-child(-n + 36):nth-child(even),
    sq:nth-child(n + 37):nth-child(-n + 48):nth-child(odd),
    sq:nth-child(n + 49):nth-child(-n + 60):nth-child(even),
    sq:nth-child(n + 61):nth-child(-n + 72):nth-child(odd),
    sq:nth-child(n + 73):nth-child(-n + 84):nth-child(even),
    sq:nth-child(n + 85):nth-child(-n + 96):nth-child(odd),
    sq:nth-child(n + 97):nth-child(-n + 108):nth-child(even),
    sq:nth-child(n + 109):nth-child(-n + 120):nth-child(odd),
    sq:nth-child(n + 121):nth-child(-n + 132):nth-child(even),
    sq:nth-child(n + 133):nth-child(-n + 144):nth-child(odd) {
      background: #99aec2 !important; // light squares
    }
  }

  #dasher_app .piece .list {
    background: #617a8e;
  }

  .preload sg-squares {
    background: repeating-conic-gradient(#99aec2 0% 25%, transparent 0% 50%) 0 / calc(200% / 9)
      calc(200% / 9);
    background-image: none;
    background-position: 100% 100%;
  }

  .preload.d-5x5 sg-squares {
    background: repeating-conic-gradient(#99aec2 0% 25%, transparent 0% 50%) 0 / calc(200% / 5)
      calc(200% / 5);
    background-position: 100% 100%;
  }

  .preload.d-12x12 sg-squares {
    background: repeating-conic-gradient(#99aec2 0% 25%, transparent 0% 50%) 0 / calc(200% / 12)
      calc(200% / 12);
    background-position: 100% 100%;
  }

  @include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
    sg-hand {
      background-color: #8a9daf;
    }
  }
}

.blue,
.gray {
  sg-squares {
    border: none;

    sq {
      border: none;

      &::after {
        content: unset !important;
      }
    }

    sq:not([class='']) {
      position: relative;

      &::before {
        content: '';
        position: absolute;
        width: 100%;
        height: 100%;
      }

      &.dest::before {
        background: radial-gradient(theme.$c-selected 19%, rgba(0, 0, 0, 0) 20%);
      }

      &.pre-dest::before {
        background: radial-gradient(theme.$c-premoved 19%, rgba(0, 0, 0, 0) 20%);
      }

      &.oc.dest::before {
        background: radial-gradient(transparent 0%, transparent 80%, theme.$c-selected-hover 80%);
      }

      &.oc.pre-dest::before {
        background: radial-gradient(transparent 0%, transparent 80%, theme.$c-premoved-hover 80%);
      }

      &.last-dest::before {
        background-color: theme.$c-last-dest;
      }

      &.check::before {
        background-color: theme.$m-red_alpha_neg50;
      }

      &.selected::before {
        background-color: theme.$c-selected;
      }

      &.preselected::before,
      &.current-pre::before {
        background-color: theme.$c-premoved;
      }

      &.dest.hover::before {
        background: theme.$c-selected-hover;
      }

      &.pre-dest.hover::before {
        background: theme.$c-premoved-hover;
      }

      &.force-selected:not(.selected)::before {
        animation: selected 1s ease-in-out infinite alternate;
      }
    }
  }

  sg-hand {
    border: none;
  }

  &.coords-edge .main-board .sg-wrap {
    border: none;

    sg-board {
      outline: none;
      border-color: #22222260;
    }

    sg-hand {
      outline: none;
    }
  }
}

.natural {
  sg-board,
  dasher_app .piece .list {
    background-color: #ffd890;
  }

  @include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
    sg-hand {
      background-color: #ffd890;
    }
  }
}

.orange {
  sg-board,
  dasher_app .piece .list {
    background-color: #f4bf57;
  }

  @include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
    sg-hand {
      background-color: #f4bf57;
    }
  }
}

.space {
  sg-squares,
  sg-squares sq,
  sg-hand {
    border-color: #eee;
  }

  &.coords-edge .main-board {
    sg-board,
    sg-hand {
      outline-color: #eee;
    }
  }

  sg-squares sq::after {
    background-color: #eee !important;
  }

  .sg-wrap.preload sg-squares {
    background-image:
      linear-gradient(to right, #eee 1px, transparent 1px),
      linear-gradient(to bottom, #eee 1px, transparent 1px);
  }

  sg-resize {
    &::after,
    &::before {
      background-color: #eee;
    }
  }
}

.doubutsu {
  .orientation-gote sg-board {
    background-image: url('../images/boards/doubutsu_flip.png');
  }

  sg-squares {
    border-top: 2px dashed #bb645c;
    border-left: 2px dashed #bb645c;

    sq {
      border-right: 2px dashed #bb645c;
      border-bottom: 2px dashed #bb645c;

      &::after {
        content: unset !important;
      }
    }
  }

  .preload sg-squares {
    border-bottom: 2px dashed #bb645c;
    border-right: 2px dashed #bb645c;
    background-image: none;
  }

  @include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
    .orientation-gote sg-hand {
      background-image: url('../images/boards/doubutsu_flip.png');
    }

    sg-hand {
      border: 2px dashed #bb645c;
      background-origin: border-box;
    }

    &.coords-edge .main-board .sg-wrap {
      border: 2px solid transparent;

      sg-board,
      sg-hand {
        outline: 2px solid #bb645c;
      }
    }

    sg-resize {
      &::after,
      &::before {
        background-color: #bb645c;
      }
    }
  }
}

.custom {
  #dasher_app .piece .list {
    background-color: var(--custom-board-color, theme.$c-bg-box);
    background-image: var(--custom-board-img, none);
  }

  sg-board {
    background-color: var(--custom-board-color, theme.$c-bg-box);
    background-image: var(--custom-board-img, none);

    sg-squares {
      border-top: 1px solid var(--custom-grid-color, theme.$c-font);
      border-left: 1px solid var(--custom-grid-color, theme.$c-font);
    }

    sq {
      border-bottom: 1px solid var(--custom-grid-color, theme.$c-font);
      border-right: 1px solid var(--custom-grid-color, theme.$c-font);

      &::after {
        background-color: var(--custom-grid-color, theme.$c-font) !important;
      }
    }

    sg-resize {
      &::after,
      &::before {
        background-color: var(--custom-grid-color, theme.$c-font);
      }
    }
  }

  @include breakpoint.breakpoint(uniboard.$mq-col2-uniboard) {
    sg-hand {
      background-color: var(--custom-hands-color, theme.$c-bg-box);
      background-image: var(--custom-hands-img, none);
      border: 1px solid var(--custom-grid-color, theme.$c-font);
    }

    &.coords-edge .main-board {
      sg-board,
      sg-hand {
        outline: 1px solid var(--custom-grid-color, theme.$c-font);
      }
    }
  }

  .preload sg-squares {
    border-top: unset;
    border-left: unset;
    border-bottom: 1px solid var(--custom-grid-color, theme.$c-font);
    border-right: 1px solid var(--custom-grid-color, theme.$c-font);
    background-image:
      linear-gradient(to right, var(--custom-grid-color, theme.$c-font) 1px, transparent 1px),
      linear-gradient(to bottom, var(--custom-grid-color, theme.$c-font) 1px, transparent 1px);
  }

  &.grid-width-0 {
    .sg-wrap {
      border-width: 0;

      sg-squares {
        border-width: 0;

        sq {
          border-width: 0;

          &::after {
            content: unset !important;
          }
        }
      }

      &.preload sg-squares {
        background-image: none;
      }
    }

    sg-hand {
      border-width: 0;
    }

    &.coords-edge .main-board .sg-wrap {
      border-width: 0;

      sg-board,
      sg-hand {
        outline-width: 0;
      }
    }
  }

  &.grid-width-2 {
    .sg-wrap {
      border-width: 2px;

      sg-squares {
        border-width: 2px;

        sq {
          border-width: 2px;

          &::after {
            margin: -6px !important;
            width: 10px !important;
            height: 10px !important;
          }
        }
      }

      &.preload sg-squares {
        background-image:
          linear-gradient(to right, var(--custom-grid-color, theme.$c-font) 2px, transparent 2px),
          linear-gradient(to bottom, var(--custom-grid-color, theme.$c-font) 2px, transparent 2px);
      }
    }

    sg-hand {
      border-width: 2px;
    }

    &.coords-edge .main-board .sg-wrap {
      border-width: 2px;

      sg-board,
      sg-hand {
        outline-width: 2px;
      }
    }
  }

  &.grid-width-3 {
    .sg-wrap {
      border-width: 3px;

      sg-squares {
        border-width: 3px;

        sq {
          border-width: 3px;

          &::after {
            margin: -7px !important;
            width: 12px !important;
            height: 12px !important;
          }
        }
      }

      &.preload sg-squares {
        background-image:
          linear-gradient(to right, var(--custom-grid-color, theme.$c-font) 3px, transparent 3px),
          linear-gradient(to bottom, var(--custom-grid-color, theme.$c-font) 3px, transparent 3px);
      }
    }

    sg-hand {
      border-width: 3px;
    }

    &.coords-edge .main-board .sg-wrap {
      border-width: 3px;

      sg-board,
      sg-hand {
        outline-width: 3px;
      }
    }
  }
}

.thick-grid:not(.custom) {
  .sg-wrap {
    border-width: 2px;

    sg-squares {
      border-width: 2px;

      sq {
        border-width: 2px;

        &::after {
          margin: -5px !important;
          width: 8px !important;
          height: 8px !important;
        }
      }
    }
  }

  sg-hand {
    border-width: 2px;
  }

  &.coords-edge .main-board .sg-wrap {
    border-width: 2px;

    sg-board,
    sg-hand {
      outline-width: 2px;
    }
  }
}

// Not too sure about this
// I believe 1px border is going to be too small for bigger (for example 4k) screens
// Can't test it tho..., if you can, please let me know
@include breakpoint.breakpoint(media-queries.$mq-xx-large) {
  sg-squares,
  sg-squares sq,
  sg-hand {
    border-width: 2px;
  }

  .coords-edge .main-board .sg-wrap {
    border-width: 2px;

    sg-board {
      outline-width: 2px;
    }
  }

  body:not(.custom) sg-squares sq::after {
    margin: -6px !important;
    width: 10px !important;
    height: 10px !important;
  }

  .thick-grid:not(.custom) {
    .sg-wrap {
      border-width: 3px;

      sg-squares {
        border-width: 3px;

        sq {
          border-width: 3px;

          &::after {
            margin: -7px !important;
            width: 12px !important;
            height: 12px !important;
          }
        }
      }
    }

    sg-hand,
    &.coords-edge .main-board .sg-wrap {
      border-width: 3px;
    }
  }
}

body:not(.hands-background),
.mini-board {
  .sg-wrap sg-hand {
    background-image: none;
    background-color: transparent;
    border: none;
  }

  &.coords-edge .main-board .sg-wrap sg-hand {
    outline: none;
  }
}
