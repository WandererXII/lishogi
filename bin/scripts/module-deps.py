#! /usr/bin/env python3

import os
import re
import glob
import networkx as nx
import pydot

def build_dag():
    dag = nx.DiGraph()

    print("Parsing modules...")

    modules_dir = "../modules"

    modules = [
        d
        for d in os.listdir(modules_dir)
        if os.path.isdir(os.path.join(modules_dir, d))
    ]

    pattern = re.compile(r"lila\.([a-zA-Z_][a-zA-Z0-9_]*)")

    for module in modules:
        module_path = os.path.join(modules_dir, module)
        scala_files = glob.glob(f"{module_path}/**/*.scala", recursive=True)

        dependencies = set()

        for scala_file in scala_files:
            with open(scala_file, "r") as f:
                content = f.read()

            matches = pattern.findall(content)
            for match in matches:
                if match in ["base", "mon", "log"]:
                    match = "common"
                if match == module:
                    continue
                if match not in modules:
                    print(
                        f"Warning: {match} is not a recognized module (found in {scala_file})"
                    )
                dependencies.add(match)

        dag.add_node(module)
        for dep in dependencies:
            dag.add_edge(module, dep)

    if not nx.is_directed_acyclic_graph(dag):
        raise ValueError("Cycle detected in the dependency graph")

    essential_deps = {}
    for module in modules:
        subgraph = dag.subgraph(nx.descendants(dag, module) | {module})
        reduced_subgraph = nx.transitive_reduction(subgraph)
        essential_deps[module] = list(reduced_subgraph.successors(module))

    dag = nx.transitive_reduction(dag)

    print("Updating build.sbt sub projects...")

    marker = '// DO NOT EDIT BELOW THIS LINE'
    build_file = '../build.sbt'
    with open(build_file, 'r') as file:
        lines = file.readlines()

    # notify is a keyword
    def renameScalaDepVal(v):
        return v + "M"
    with open(build_file, "w") as file:
        marker_index = next(i for i, line in enumerate(lines) if marker in line)
        file.writelines(lines[:marker_index + 1])
        toWrite = ''
        toWrite = toWrite + "// Auto-generated by 'pnpm server:modules'\n\n"
        toWrite = toWrite + f"""lazy val allModules = Seq({', '.join(list(map(renameScalaDepVal, reversed(list(nx.topological_sort(dag))))))})\n"""
        for module, deps in essential_deps.items():
            rs_deps = sorted(list(map(renameScalaDepVal, deps)))
            toWrite = toWrite + f"""lazy val {renameScalaDepVal(module)} = module("{module}", Seq({', '.join(rs_deps)}))"""
            if module == "i18n":
                toWrite = toWrite + i18n()
            else:
                toWrite = toWrite + '\n'
        file.write(toWrite)

    print("Creating server-dag.png...")
    pydot_graph = nx.nx_pydot.to_pydot(dag)
    pydot_graph.write_png("../doc/server-dag.png")
    
    print("DONE!")


def i18n():
    translation_dirname = "translation"
    translation_source = f"{translation_dirname}/source"
    translation_dest = f"{translation_dirname}/dest"
    translations = [
        f'"{d.removesuffix(".xml")}"'
        for d in os.listdir(f"../{translation_source}")
        if d.endswith(".xml")
    ]
    return f""".settings(
  Compile / sourceGenerators += Def.task {{
    MessageCompiler(
      sourceDir = new File("{translation_source}"),
      destDir = new File("{translation_dest}"),
      dbs = Seq({", ".join(translations)}),
      compileTo = (Compile / sourceManaged).value
    )
  }}.taskValue
)
"""


if __name__ == "__main__":
    build_dag()
