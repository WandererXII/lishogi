#!/usr/bin/env ruby

require 'fileutils'
require 'base64'
include FileUtils

lila_dir = pwd()
source_dir = lila_dir + '/public/piece/'
dest_dir = lila_dir + '/public/piece-css/'

bidirectional = [['Mnemonic', 'svg']]

themes = [
  ['Ryoko_1Kanji', 'svg'],
  ['Intl', 'svg'],
]
types = {
  'svg' => 'svg+xml;base64,',
  'png' => 'png;base64,'
}
roles = [
  'lance',
  'leopard',
  'copper',
  'silver',
  'gold',
  'elephant',
  'chariot',
  'bishop',
  'tiger',
  'phoenix',
  'kirin',
  'sidemover',
  'verticalmover',
  'rook',
  'horse',
  'dragon',
  'queen',
  'lion',
  'pawn',
  'gobetween',
  'king',
  'tama',
  'promotedpawn',
  'ox',
  'stag',
  'boar',
  'falcon',
  'prince',
  'eagle',
  'whale',
  'whitehorse',
  'dragonpromoted',
  'horsepromoted',
  'lionpromoted',
  'queenpromoted',
  'bishoppromoted',
  'elephantpromoted',
  'sidemoverpromoted',
  'verticalmoverpromoted',
  'rookpromoted'
]
colors = ['sente', 'gote']

def sameUpDownM(role)
  [
    'bishop',
    'bishoppromoted',
    'boar',
    'chariot',
    'dragon',
    'dragonpromoted',
    'horse',
    'horsepromoted',
    'king',
    'kirin',
    'leopard',
    'lion',
    'lionpromoted',
    'ox',
    'phoenix',
    'prince',
    'queen',
    'queenpromoted',
    'rook',
    'rookpromoted',
    'sidemover',
    'sidemoverpromoted',
    'stag',
    'tama',
    'verticalmover',
    'verticalmoverpromoted',
  ].include? role
end

def classesMnemonic(color, role)
  ".d-12x12 piece.#{role}.#{color}, .variant-chushogi piece.#{role}.#{color}"
end

def classesWithOrientation(color, role, flipped)
  if flipped
    if color == 'sente'
      ".sg-wrap.orientation-gote.d-12x12 piece.#{role}.gote,
      .variant-chushogi .spare-bottom piece.#{role}.gote"
    else
      ".sg-wrap.orientation-gote.d-12x12 piece.#{role}.sente,
      .variant-chushogi .spare-top piece.#{role}.sente"
    end
  else
    if color == 'sente'
      ".d-12x12 piece.#{role}.sente, .variant-chushogi piece.#{role}.sente,
      .sg-wrap.orientation-sente.d-12x12 piece.#{role}.sente,
      .variant-chushogi .spare-bottom piece.#{role}.sente"
    else
      ".d-12x12 piece.#{role}.gote, .variant-chushogi piece.#{role}.gote,
      .sg-wrap.orientation-sente.d-12x12 piece.#{role}.gote,
      .variant-chushogi .spare-top piece.#{role}.gote"
    end
  end
end

def classes(color, role)
  if color == 'sente' # facing up
    if role == 'king'
      ".sg-wrap.orientation-gote.d-12x12 piece.king.gote,
      .variant-chushogi .spare-bottom piece.king"
    elsif role == 'tama'
      ".d-12x12 piece.king.sente,
      .sg-wrap.orientation-sente.d-12x12 piece.king.sente,
      .variant-chushogi .spare-bottom piece.king.sente"
    else
      ".sg-wrap.orientation-sente.d-12x12 piece.#{role}.sente,
      .sg-wrap.orientation-gote.d-12x12 piece.#{role}.gote,
      .variant-chushogi .spare-bottom piece.#{role}"
    end
  else # facing down
    if role == 'king'
      ".sg-wrap.orientation-sente.d-12x12 piece.king.gote,
      .variant-chushogi .spare-top piece.king"
    elsif role == 'tama'
      ".sg-wrap.orientation-gote.d-12x12 piece.king.sente,
      .variant-chushogi .spare-top piece.king.sente"
    else
      ".sg-wrap.orientation-sente.d-12x12 piece.#{role}.gote,
      .sg-wrap.orientation-gote.d-12x12 piece.#{role}.sente,
      .variant-chushogi .spare-top piece.#{role}"
    end
  end
end

# inline SVG
themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes = colors.map { |color|
    roles.map { |role|
      piece = (color == 'sente' ? '0_' : '1_') + role.upcase
      file = source_dir + 'Chu_' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        classes(color, role) + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "') !important;}"
      end
    }
  }.flatten
  if ext == 'png'
    classes.append("piece{ will-change: transform; background-repeat: unset; }")
  else
    classes.append("piece{ will-change: auto; background-repeat: no-repeat; }")
  end
  File.open(dest_dir + 'Chu_' + name + '.css', 'w') { |f| f.puts classes.join("\n") }
}
bidirectional.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes = ['-1', ''].map { |up|
    colors.map { |color|
      roles.map { |role|
        piece = (color == 'sente' ? '0_' : '1_') + role.upcase + up
        file = source_dir + 'Chu_' + name + '/' + piece + '.' + ext
        if !(name == 'Mnemonic' && up == '-1' && sameUpDownM(role))
          File.open(file, 'r') do|image_file|
            image = image_file.read
            base64 = Base64.strict_encode64(image)
            if sameUpDownM(role)
              classesMnemonic(color, role) + ' {' +
              "background-image:url('data:image/" + types[ext] + base64 + "') !important;}"
            else
              classesWithOrientation(color, role, up.length != 0) + ' {' +
                "background-image:url('data:image/" + types[ext] + base64 + "') !important;}"
            end
          end
        end
      }
    }
  }.flatten
  if ext == 'png'
    classes.append("piece{ will-change: transform; background-repeat: unset; }")
  else
    classes.append("piece{ will-change: auto; background-repeat: no-repeat; }")
  end
  if name == 'Mnemonic'
    classes.append("piece{ background-size: contain !important; }")
  end
  File.open(dest_dir + 'Chu_' + name + '.css', 'w') { |f| f.puts classes.join("\n") }
}

# external SVG
themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes = colors.map { |color|
    roles.map { |role|
      piece = (color == 'sente' ? '0_' : '1_') + role.upcase
      classes(color, role) + ' {' +
        "background-image:url('/assets/piece/" + name + "/" + piece + "." + ext + "') !important;}"
    }
  }.flatten
  if ext == 'png'
    classes.append("piece{ will-change: transform; background-repeat: unset; }")
  else
    classes.append("piece{ will-change: auto; background-repeat: no-repeat; }")
  end
  File.open(dest_dir + name + '.external.css', 'w') { |f| f.puts classes.join("\n") }
}
bidirectional.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes = ['-1', ''].map { |up|
    colors.map { |color|
      roles.map { |role|
        piece = (color == 'sente' ? '0_' : '1_') + role.upcase + (name == "Mnemonic" && sameUpDownM(role) ? "" : up)
        classesWithOrientation(color, role, up.length != 0) + ' {' +
          "background-image:url('/assets/piece/" + name + "/" + piece + "." + ext + "') !important;}"     
      }
    }
  }.flatten
  if ext == 'png'
    classes.append("piece{ will-change: transform; background-repeat: unset; }")
  else
    classes.append("piece{ will-change: auto; background-repeat: no-repeat; }")
  end
  if name == 'Mnemonic'
    classes.append("piece{ background-size: contain !important; }")
  end
  File.open(dest_dir + name + '.css', 'w') { |f| f.puts classes.join("\n") }
}